[comment]
/*******************************************************************************
 * 
 * This is a MTL generator template
 * See: 
 * Language Reference: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/language.html?cp=5_3_0
 * Operations: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/operations.html?cp=5_3_2
 * Text production rules: http://help.eclipse.org/juno/topic/org.eclipse.acceleo.doc/pages/reference/textproductionrules.html?cp=5_3_5
 *
 *******************************************************************************
[/comment]
[module jhypster-mtl('http://www.eclipse.org/uml2/4.0.0/UML')/]


[template public generate(c : Class)]
[comment @main/]
[file (c.name.concat('.json'), false, 'UTF-8')]
{
    [if (c.getAssociations()->size()>0)]
    "relationships": ['['/]
    [for (e : Property |c.getAssociations().navigableOwnedEnd->select(type <> c))]
    [e.generateRef(c.getAssociations().navigableOwnedEnd->select(type <> c)->asSequence()->indexOf(e))/]
    [if (c.getAssociations().navigableOwnedEnd->select(type <> c)->asSequence()->last()<>e)]
    ,    
    [/if]
    
    [/for]
    ['],'/]
    [/if]
    [if (c.attribute->size()>0)]
    "fields": ['['/]
    [for (e : Property |c.attribute)]
    [e.generate(c.attribute->asSequence()->indexOf(e))/]
    [if (c.attribute->asSequence()->last()<>e)]
    ,    
    [/if]
    
    [/for]

    ['],'/]
    [/if]
    "fieldsContainOwnerManyToMany": false,
    "fieldsContainOneToMany": false,
    "fieldsContainLocalDate": true,
    "fieldsContainCustomTime": true,
    "fieldsContainBigDecimal": false,
    "fieldsContainDateTime": false,
    "fieldsContainDate": false,
    "changelogDate": "20150303155053",
    "pagination": "pagination"
}
[/file]
[/template]



[template public generateRef(a : Property,id:Integer)]
    {
            "relationshipId": [id/],
            "relationshipName": "[a.name.toLower()/]",
            "relationshipNameCapitalized": "[ a.name.toUpperFirst()/]",
            "relationshipFieldName": "[ a.name.toLower()/]",
            "otherEntityName": "[a.name.toLower()/]",
            "relationshipType": "one-to-one",
            "otherEntityNameCapitalized": "[a.name.toUpperFirst()/]",
            "ownerSide": true
        }
[/template]
 
[template public generate(a : Property,id:Integer)]
{
            "fieldId": [id/],
            "fieldName": "[a.name.toLower()/]",
            "fieldType": [toType(a.type.name).trim()/]
            "fieldNameCapitalized": "[a.name.toUpperFirst()/]",
            "fieldNameUnderscored": "[a.name.toLower()/]"
}
[/template]

[template public toType(s : String) ]
[if (s.equalsIgnoreCase('Integer'))]	"int",
	[elseif (s.equalsIgnoreCase('Boolean'))]	"bool",
	[elseif (s.equalsIgnoreCase('ByteArray'))]	"byte",
	[elseif (s.equalsIgnoreCase('Date'))]	"DateTime",
	[elseif (s.equalsIgnoreCase('Real'))]	"double",
	[elseif (s.equalsIgnoreCase('UnlimitedNatural'))]	"uint",
	[elseif (s.equalsIgnoreCase('Long') or s.equalsIgnoreCase('String') or s.equalsIgnoreCase('Char'))]	"[s.toLower()/]",
[else] "[s/]",	
[/if]
[/template]



